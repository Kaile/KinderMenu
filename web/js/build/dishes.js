// Generated by CoffeeScript 1.8.0
var Consist, ConsistList, DishCreate, DishImport, Ingridient, IngridientObject, Ingridients, IngridientsObject, checker, client, debugMode, dumper;

debugMode = false;

client = new $.RestClient('/v1/');

client.add('dishes');

client.add('consists');

client.add('ingridients');

checker = new $.Checker(true, debugMode);

dumper = new $.Dumper(debugMode);

DishCreate = React.createClass({
  getInitialState: function() {
    return {
      dish: React.createElement("div", {
        "className": "col-lg-6"
      }, React.createElement("h3", null, "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0431\u043b\u044e\u0434\u0430"), React.createElement("div", {
        "className": "input-group"
      }, React.createElement("input", {
        "type": "text",
        "className": "form-control",
        "value": this.dishName,
        "onChange": this.handleDishName
      }), React.createElement("span", {
        "className": "input-group-btn"
      }, React.createElement("input", {
        "type": "button",
        "className": "btn btn-default",
        "value": "Сохранить",
        "onClick": this.handleSaveName
      })))),
      dishId: 0,
      ingridients: '',
      dishName: ''
    };
  },
  handleDishName: function(e) {
    e.preventDefault();
    return this.state.dishName = e.target.value;
  },
  handleSaveName: function(e) {
    e.preventDefault();
    return this.saveName().done((function(_this) {
      return function(data) {
        return _this.setState({
          dish: React.createElement("a", {
            "href": "#",
            "className": "list-group-item"
          }, React.createElement("h4", {
            "className": "list-group-item-heading"
          }, _this.state.dishName), React.createElement("p", {
            "className": "list-group-item-text"
          }, React.createElement(ConsistList, {
            "dishId": _this.state.dishId
          }))),
          ingridients: React.createElement(Ingridients, null)
        });
      };
    })(this)).fail(function() {
      return new $.Informer('Не удалось сохранить новое блюдо =(, попробуйте выполнить операцию позже', 'error');
    });
  },
  clearValues: function() {
    return this.setState(this.getInitialState());
  },
  saveName: function() {
    var dfd;
    dfd = new $.Deferred();
    client.dishes.create({
      name: this.state.dishName
    }).done((function(_this) {
      return function(data) {
        _this.state.dishId = data.id;
        return dfd.resolve();
      };
    })(this)).fail(function(data) {
      checker.showFailMessage(data);
      return dfd.reject();
    });
    return dfd.promise();
  },
  render: function() {
    return React.createElement("div", {
      "className": "row"
    }, this.state.dish, React.createElement("div", {
      "className": "col-lg-10"
    }, React.createElement("br", null), React.createElement("h4", null, "\u0412\u044b\u0431\u0438\u0440\u0438\u0442\u0435 \u0438\u043d\u0433\u0440\u0438\u0434\u0438\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0431\u043b\u044e\u0434\u0430"), this.state.ingridients));
  }
});

ConsistList = React.createClass({
  getInitialState: function() {
    return $('document').on('consist:update', function() {
      return this.componentDidMount()({
        consistList: []
      });
    });
  },
  componentDidMount: function() {
    var consists;
    consists = [];
    return client.consists.read({
      dish_id: this.props.dishId
    }).done((function(_this) {
      return function(data) {
        var item, _i, _len;
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          item = data[_i];
          consists.push(React.createElement(Consist, {
            "consist": item
          }));
        }
        return _this.setState({
          consistList: consists
        });
      };
    })(this)).fail(function(data) {
      return checker.showFailMessage(data);
    });
  },
  render: function() {
    return React.createElement("span", null, "\u0421\u043e\u0441\u0442\u0430\u0432 \u0431\u043b\u044e\u0434\u0430: ", this.state.consistList);
  }
});

Consist = React.createClass({
  propTypes: React.PropTypes.object,
  render: function() {
    return React.createElement("span", null, React.createElement("span", {
      "className": "label label-info"
    }, this.props.consist.name, ": ", this.props.consist.size, " ", this.props.consist.shortName, "."), "  ", React.createElement("span", null));
  }
});

IngridientsObject = {
  getInitialState: function() {
    $(document).on('ingridients:update', this.componentDidMount());
    return {
      ingridients: ''
    };
  },
  componentDidMount: function() {
    var tmpIngridients;
    tmpIngridients = [];
    return client.ingridients.read().done((function(_this) {
      return function(data) {
        tmpIngridients = data.map(function(ingridient) {
          return React.createElement(Ingridient, {
            "value": ingridient
          });
        });
        return _this.setState({
          ingridients: tmpIngridients
        });
      };
    })(this)).fail(function(data) {
      return checker.showFailMessage(data);
    });
  },
  render: function() {
    return React.createElement("div", null, this.state.ingridients);
  }
};

IngridientObject = {
  render: function() {
    var btnStyle;
    btnStyle = {
      margin: "5px"
    };
    return React.createElement("button", {
      "style": btnStyle,
      "className": "btn btn-default"
    }, this.props.value.name);
  }
};

Ingridients = React.createClass(IngridientsObject);

Ingridient = React.createClass(IngridientObject);

DishImport = React.createClass({
  getInitialState: function() {
    return {
      importText: ''
    };
  },
  handleImportText: function(e) {
    e.preventDefault();
    return this.state.importText = e.target.text();
  },
  handleImport: function() {},
  render: function() {
    var areaStyle;
    areaStyle = {
      width: '100%',
      height: '300px',
      maxWidth: '100%',
      maxHeight: '300px',
      fontFamily: 'Courier New',
      fontSize: '14pt'
    };
    return React.createElement("div", null, React.createElement("textarea", {
      "style": areaStyle,
      "value": this.state.importText,
      "onChange": this.handleImportText
    }), React.createElement("br", null), React.createElement("button", {
      "onClick": this.handleImport,
      "className": "btn btn-primary pull-right"
    }, "\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c"));
  }
});

React.render(React.createElement(DishImport, null), $("#dish-import").get(0));
