// Generated by CoffeeScript 1.8.0
var Consist, ConsistList, Dish, DishAdd, DishAddButton, DishAddList, DishList, Ingridient, IngridientList, Menu, MenuList, Unit, UnitList, checker, client;

client = new $.RestClient('/v1/');

client.add('ingestions');

client.add('menus');

client.add('dishes');

client.add('portions');

client.add('ingridients');

checker = new $.Checker(true, true);

Menu = React.createClass({
  getInitialState: function() {
    return {
      ingestions: [],
      menus: [],
      date: new Date
    };
  },
  componentDidMount: function() {
    return client.menus.read({
      date: this.state.date
    }).done((function(_this) {
      return function(data) {
        if (checker.check(data, 'Read menu by it date')) {
          return _this.setState({
            ingestions: data
          });
        }
      };
    })(this));
  },
  render: function() {
    return React.createElement("div", {
      "className": "panel panel-default"
    }, React.createElement("div", {
      "className": "panel-heading",
      "title": this.state.date.toString()
    }, React.createElement("h3", null, React.createElement("p", {
      "className": "text-center"
    }, React.createElement("strong", null, "\u041c\u0435\u043d\u044e \u043d\u0430 ", this.state.date.toLocaleDateString())))), React.createElement("table", {
      "className": "table"
    }, React.createElement("thead", null, React.createElement("th", null, React.createElement("h4", null, React.createElement("p", {
      "className": "text-center"
    }, React.createElement("strong", null, "\u041f\u0440\u0438\u0435\u043c \u043f\u0438\u0449\u0438")))), React.createElement("th", null, React.createElement("h4", null, React.createElement("p", {
      "className": "text-center"
    }, React.createElement("strong", null, "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0431\u043b\u044e\u0434\u0430 \u0438 \u0441\u043e\u0441\u0442\u0430\u0432"))))), React.createElement(MenuList, {
      "ingestions": this.state.ingestions,
      "menus": this.state.menus
    })), React.createElement("div", {
      "className": "panel-footer"
    }, "\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0441\u043e\u0441\u0442\u0430\u0432:"));
  }
});

MenuList = React.createClass({
  render: function() {
    var i, ingestions, _i, _ref;
    ingestions = [];
    for (i = _i = 0, _ref = this.props.ingestions.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      ingestions.push(React.createElement("tr", null, React.createElement("td", null, React.createElement("h4", null, React.createElement("p", {
        "className": "text-center"
      }, this.props.ingestions[i].name))), React.createElement("td", null, React.createElement(DishList, null), React.createElement(DishAddButton, null))));
    }
    return React.createElement("tbody", null, ingestions);
  }
});

DishList = React.createClass({
  getInitialState: function() {
    return {
      dishes: []
    };
  },
  componentDidMount: function() {
    var loadedDishes;
    loadedDishes = [];
    return client.dishes.read().done((function(_this) {
      return function(data) {
        var i, _i, _ref;
        if (!checker.check(data, 'Read dishes by menu id')) {
          return;
        }
        for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          loadedDishes.push(React.createElement(Dish, {
            "dish": data[i]
          }));
        }
        return _this.setState({
          dishes: loadedDishes
        });
      };
    })(this));
  },
  render: function() {
    return React.createElement("div", {
      "className": "list-group"
    }, this.state.dishes);
  }
});

Dish = React.createClass({
  render: function() {
    return React.createElement("a", {
      "href": "#",
      "className": "list-group-item"
    }, React.createElement("h4", {
      "className": "list-group-item-heading"
    }, this.props.dish.name), React.createElement("p", {
      "className": "list-group-item-text"
    }, React.createElement(ConsistList, {
      "dishId": this.props.dish.id
    })));
  }
});

ConsistList = React.createClass({
  getInitialState: function() {
    return {
      consistList: []
    };
  },
  componentDidMount: function() {
    var consists;
    consists = [];
    return client.dishes.read(this.props.dishId).consists().done((function(_this) {
      return function(data) {
        var i, _i, _ref;
        if (!checker.check(data, 'Read consists by dish id')) {
          return;
        }
        for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          consists.push(React.createElement(Consist, {
            "consist": data[i]
          }));
        }
        return _this.setState({
          consistList: consists
        });
      };
    })(this));
  },
  render: function() {
    return React.createElement("span", null, "\u0421\u043e\u0441\u0442\u0430\u0432 \u0431\u043b\u044e\u0434\u0430: ", this.state.consistList);
  }
});

Consist = React.createClass({
  render: function() {
    return React.createElement("span", {
      "className": "label label-info"
    }, this.props.consist.name, ":", this.props.consist.portion);
  }
});

DishAddButton = React.createClass({
  render: function() {
    return React.createElement("button", {
      "onClick": this.openDialog,
      "className": "btn btn-default"
    }, "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0431\u043b\u044e\u0434\u043e");
  },
  openDialog: function() {
    return $('#dish-add-dialog').modal();
  }
});

DishAdd = React.createClass({
  getInitialState: function() {
    return {
      elemCount: 0
    };
  },
  render: function() {
    if (this.state.elemCount > 0) {
      return React.createElement(DishAddList, {
        "onCountUpdate": this.handleCountUpdate
      });
    } else {
      return React.createElement("div", null, React.createElement("br", null), "\u0411\u043b\u044e\u0434 \u0435\u0449\u0435 \u043d\u0435\u0442, \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0435 \u043f\u0435\u0440\u0432\u043e\u0435 \u0431\u043b\u044e\u0434\u043e \u043d\u0430\n\u0432\u043a\u043b\u0430\u0434\u043a\u0435 \"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u043b\u044e\u0434\u0430\"");
    }
  },
  handleCountUpdate: function(count) {
    return this.setState({
      elemCount: count
    });
  }
});

DishAddList = React.createClass({
  getInitialState: function() {
    return {
      dishAddList: []
    };
  },
  componentDidMount: function() {
    var dishList;
    dishList = [];
    return client.dishes.read().done((function(_this) {
      return function(data) {
        var i, _i, _ref;
        if (!checker.check(data, 'Read all dishes for add dialog')) {
          return;
        }
        for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          dishList.push(React.createElement(Dish, {
            "dish": data[i]
          }));
        }
        _this.props.onCountUpdate(dishList.length);
        return _this.setState({
          dishAddList: dishList
        });
      };
    })(this));
  },
  render: function() {
    return React.createElement("div", {
      "className": "list-group"
    }, this.state.dishAddList);
  }
});

IngridientList = React.createClass({
  getInitialState: function() {
    return {
      ingridientList: []
    };
  },
  componentDidMount: function() {
    var ingridients;
    ingridients = [];
    return client.ingridients.read().done((function(_this) {
      return function(data) {
        var i, _i, _ref;
        if (!checker.check(data, 'Read all ingridients for selector in add dish dialog')) {
          return;
        }
        for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          ingridients.push(React.createElement(Ingridient, {
            "name": data[i].name
          }));
        }
        return _this.setState({
          ingridientList: ingridients
        });
      };
    })(this));
  },
  render: function() {
    return React.createElement("ul", {
      "className": "dropdown-menu"
    }, this.state.ingridientList);
  }
});

Ingridient = React.createClass({
  render: function() {
    return React.createElement("li", null, React.createElement("a", {
      "href": "#"
    }, this.props.name));
  }
});

UnitList = React.createClass({
  render: function() {
    return React.createElement("div", null);
  }
});

Unit = React.createClass({
  render: function() {
    return React.createElement("li", {
      "role": "presentation"
    }, React.createElement("a", {
      "role": "menuitem",
      "tabindex": "-1",
      "href": "#"
    }, "\u043c\u0435\u0442\u0440"));
  }
});

React.render(React.createElement(Menu, null), $('#menu').get(0));

React.render(React.createElement(DishAdd, null), $('#menu-dish-add').get(0));

React.render(React.createElement(IngridientList, null), $('#menu-ingridient-list').get(0));
