// Generated by CoffeeScript 1.8.0
var Consist, ConsistList, Dish, DishAdd, DishAddButton, DishAddList, DishConsist, DishCreate, Ingridient, IngridientInput, InputChangeMixin, Menu, MenuDishList, MenuList, Portion, Saver, checker, client, debugMode, dumper;

debugMode = true;

client = new $.RestClient('/v1/');

client.add('ingestions');

client.add('menus');

client.add('menu-dishes');

client.add('dishes');

client.add('portions');

client.add('ingridients');

client.add('units');

client.add('consists');

checker = new $.Checker(true, debugMode);

dumper = new $.Dumper(debugMode);

Saver = (function() {
  function Saver() {}

  Saver.prototype.objectList = [];

  Saver.prototype.add = function(savedObject) {
    if (typeof savedObject.save === 'function') {
      return this.objectList.push(savedObject);
    }
  };

  Saver.prototype.save = function() {
    var obj, _i, _len, _ref;
    _ref = this.objectList;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      obj.save();
    }
    return this.objectList = [];
  };

  return Saver;

})();

InputChangeMixin = {
  handleChange: function(e) {
    return this.setState({
      value: e.target.value
    });
  }
};

Menu = React.createClass({
  getInitialState: function() {
    return {
      ingestions: [],
      menu: [],
      date: new Date
    };
  },
  componentDidMount: function() {
    client.menus.read({
      date: this.state.date
    }).done((function(_this) {
      return function(data) {
        if (data.length) {
          if (checker.check(data, 'Read menu by it date')) {
            return _this.setState({
              menu: data
            });
          }
        }
      };
    })(this));
    return client.ingestions.read().done((function(_this) {
      return function(data) {
        if (checker.check(data, 'Load ingestion list for menu')) {
          return _this.setState({
            ingestions: data
          });
        }
      };
    })(this));
  },
  render: function() {
    return React.createElement("div", {
      "className": "panel panel-default"
    }, React.createElement("div", {
      "className": "panel-heading",
      "title": this.state.date.toString()
    }, React.createElement("h3", null, React.createElement("p", {
      "className": "text-center"
    }, React.createElement("strong", null, "\u041c\u0435\u043d\u044e \u043d\u0430 ", this.state.date.toLocaleDateString())))), React.createElement("table", {
      "className": "table"
    }, React.createElement("thead", null, React.createElement("th", null, React.createElement("h4", null, React.createElement("p", {
      "className": "text-center"
    }, React.createElement("strong", null, "\u041f\u0440\u0438\u0435\u043c \u043f\u0438\u0449\u0438")))), React.createElement("th", null, React.createElement("h4", null, React.createElement("p", {
      "className": "text-center"
    }, React.createElement("strong", null, "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0431\u043b\u044e\u0434\u0430 \u0438 \u0441\u043e\u0441\u0442\u0430\u0432"))))), React.createElement(MenuList, {
      "ingestions": this.state.ingestions,
      "menuId": this.state.menu.id
    })), React.createElement("div", {
      "className": "panel-footer"
    }, "\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0441\u043e\u0441\u0442\u0430\u0432:"));
  }
});

MenuList = React.createClass({
  propTypes: {
    ingestions: React.PropTypes.arrayOf(React.PropTypes.object),
    menuId: React.PropTypes.number
  },
  render: function() {
    var i, ingestions, _i, _ref;
    ingestions = [];
    for (i = _i = 0, _ref = this.props.ingestions.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      ingestions.push(React.createElement("tr", null, React.createElement("td", null, React.createElement("h4", null, React.createElement("p", {
        "className": "text-center"
      }, this.props.ingestions[i].name))), React.createElement("td", null, React.createElement(MenuDishList, {
        "menuId": this.props.menuId,
        "ingestionId": this.props.ingestions[i].id
      }), React.createElement(DishAddButton, null))));
    }
    return React.createElement("tbody", null, ingestions);
  }
});

MenuDishList = React.createClass({
  propTypes: {
    menuId: React.PropTypes.number,
    ingestionId: React.PropTypes.number
  },
  getInitialState: function() {
    return {
      dishes: []
    };
  },
  componentDidMount: function() {
    var loadedDishes;
    loadedDishes = [];
    return client['menu-dishes'].read({
      menu_id: this.props.menuId,
      ingestion_id: this.props.ingestionId
    }).done((function(_this) {
      return function(data) {
        var i, _i, _ref;
        if (!checker.check(data, 'Read dishes by menu id and ingestion id')) {
          return;
        }
        for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          loadedDishes.push(React.createElement(Dish, {
            "dish": data[i]
          }));
        }
        return _this.setState({
          dishes: loadedDishes
        });
      };
    })(this));
  },
  render: function() {
    return React.createElement("div", {
      "className": "list-group"
    }, this.state.dishes);
  }
});

Dish = React.createClass({
  propTypes: {
    dish: React.PropTypes.object
  },
  render: function() {
    return React.createElement("a", {
      "href": "#",
      "className": "list-group-item"
    }, React.createElement("h4", {
      "className": "list-group-item-heading"
    }, this.props.dish.name), React.createElement("p", {
      "className": "list-group-item-text"
    }, React.createElement(ConsistList, {
      "dishId": this.props.dish.id
    })));
  }
});

ConsistList = React.createClass({
  getInitialState: function() {
    return {
      consistList: []
    };
  },
  componentDidMount: function() {
    var consists;
    consists = [];
    return client.consists.read({
      dish_id: this.props.dishId
    }).done((function(_this) {
      return function(data) {
        var i, _i, _ref;
        if (!checker.check(data, 'Read consists by dish id')) {
          return;
        }
        for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          consists.push(React.createElement(Consist, {
            "consist": data[i]
          }));
        }
        return _this.setState({
          consistList: consists
        });
      };
    })(this));
  },
  render: function() {
    return React.createElement("span", null, "\u0421\u043e\u0441\u0442\u0430\u0432 \u0431\u043b\u044e\u0434\u0430: ", this.state.consistList);
  }
});

Consist = React.createClass({
  propTypes: React.PropTypes.object,
  render: function() {
    return React.createElement("span", null, React.createElement("span", {
      "className": "label label-info"
    }, this.props.consist.name, ": ", this.props.consist.size, " ", this.props.consist.shortName, "."), "  ", React.createElement("span", null));
  }
});

DishAddButton = React.createClass({
  render: function() {
    return React.createElement("button", {
      "onClick": this.openDialog,
      "className": "btn btn-default"
    }, "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0431\u043b\u044e\u0434\u043e");
  },
  openDialog: function() {
    return $('#dish-add-dialog').modal();
  }
});

DishAdd = React.createClass({
  getInitialState: function() {
    return {
      elemCount: 0
    };
  },
  render: function() {
    return React.createElement(DishAddList, {
      "onCountUpdate": this.handleCountUpdate
    });
  },
  handleCountUpdate: function(count) {
    return this.setState({
      elemCount: count
    });
  }
});

DishAddList = React.createClass({
  propTypes: {
    onCountUpdate: React.PropTypes.func
  },
  getInitialState: function() {
    return {
      dishAddList: []
    };
  },
  componentDidMount: function() {
    var dishList;
    dishList = [];
    return client.dishes.read().done((function(_this) {
      return function(data) {
        var i, _i, _ref;
        if (!checker.check(data, 'Read all dishes for add dialog')) {
          return;
        }
        for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          dishList.push(React.createElement(Dish, {
            "dish": data[i]
          }));
        }
        _this.props.onCountUpdate(dishList.length);
        return _this.setState({
          dishAddList: dishList
        });
      };
    })(this));
  },
  render: function() {
    return React.createElement("div", {
      "className": "list-group"
    }, this.state.dishAddList);
  }
});

DishCreate = React.createClass({
  mixins: [InputChangeMixin],
  _ingridients: [],
  _portions: [],
  Private: [],
  _units: [],
  _dishId: 0,
  getInitialState: function() {
    return {
      value: ''
    };
  },
  setIngridients: function(ingridients) {
    return this._ingridients = ingridients;
  },
  setPortions: function(portions) {
    return this._portions = portions;
  },
  setUnits: function(units) {
    return this._units = units;
  },
  saved: new $.Deferred(),
  save: function() {
    if (!this.validate()) {
      return new $.Informer('Данные не прошли валидацию');
    }
    this.saveDish().done((function(_this) {
      return function(data) {
        if (!checker.check(data, 'Save new dish')) {
          return;
        }
        _this._dishId = data.id;
        return _this.saveIngridients();
      };
    })(this));
    return this.saved.done(function() {
      return new $.Informer('Новое блюдо сохранено, Вы можете добавить его в меню', 'info');
    });
  },
  validate: function() {
    if (!this.state.value) {
      new $.Informer('Не введено название блюда');
      return false;
    }
    if (!(this._ingridients.length === this._portions.length && this._portions.length === this._units.length)) {
      console.log("ingridient length: " + this._ingridients.length);
      console.log("portions length: " + this._portions.length);
      console.log("units length: " + this._units.length);
      new $.Informer('Проверьте правильность заполнения ингридиентов блюда');
      return false;
    }
    return true;
  },
  saveDish: function() {
    return client.dishes.create({
      name: this.state.value
    });
  },
  saveIngridients: function() {
    var loopCallback, loopRecursion;
    loopCallback = (function(_this) {
      return function(i, deferred) {
        if (_this._ingridients[i].name.length) {
          if (_this._ingridients[i].id === 0) {
            client.ingridients.create({
              name: _this._ingridients[i].name,
              unit_id: _this._units[i].id
            }).done(function(data) {
              if (checker.check(data, 'Saving new ingridient: ' + _this._ingridients[i].name)) {
                _this.savePortion(data.id, i);
              }
              return deferred.resolve();
            });
          } else {
            _this.savePortion(_this._ingridients[i].id, i);
            deferred.resolve();
          }
        }
        return deferred.promise();
      };
    })(this);
    loopRecursion = function(start, stop) {
      if (start > stop) {
        return;
      }
      return loopCallback(start, $.Deferred()).done(function() {
        return loopRecursion(start + 1, stop);
      });
    };
    return loopRecursion(0, this._units.length - 1);
  },
  savePortion: function(ingridientId, i) {
    return client.portions.read({
      ingridient_id: ingridientId,
      size: this._portions[i]
    }).done((function(_this) {
      return function(data) {
        var existPortionId;
        if (data.length && checker.check(data, 'Getting portion exist or not')) {
          existPortionId = data[0].id;
          return _this.saveConsist(existPortionId, i);
        } else {
          return client.portions.create({
            ingridient_id: ingridientId,
            size: _this._portions[i]
          }).done(function(data) {
            if (checker.check(data, 'Saving new portion: ' + data.id)) {
              return _this.saveConsist(data.id, i);
            }
          });
        }
      };
    })(this));
  },
  saveConsist: function(portionId, i) {
    return client.consists.read({
      portion_id: portionId,
      dish_id: this._dishId
    }).done((function(_this) {
      return function(data) {
        if (data.length && checker.check(data, "Checks existing consist for dish: " + _this._dishId + " and portion " + portionId)) {

        } else {
          return client.consists.create({
            portion_id: portionId,
            dish_id: _this._dishId
          }).done(function(data) {
            if (checker.check(data, 'Saving new consist')) {
              return _this.saved.resolve();
            }
          });
        }
      };
    })(this));
  },
  render: function() {
    return React.createElement("div", {
      "className": "form-group"
    }, React.createElement("br", null), React.createElement("label", {
      "htmlFor": "dish-name",
      "className": "sr-only"
    }, "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0431\u043b\u044e\u0434\u0430"), React.createElement("input", {
      "type": "text",
      "className": "form-control",
      "placeholder": "Введите название блюда",
      "value": this.state.value,
      "onChange": this.handleChange
    }), React.createElement("br", null), React.createElement("p", null, "\u0421\u043e\u0441\u0442\u0430\u0432 \u0431\u043b\u044e\u0434\u0430:"), React.createElement(DishConsist, {
      "returnIngridients": this.setIngridients,
      "returnPortions": this.setPortions,
      "returnUnits": this.setUnits
    }), React.createElement("br", null), React.createElement("button", {
      "className": "btn btn-sm btn-primary",
      "onClick": this.save
    }, "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u043b\u044e\u0434\u043e"));
  }
});

DishConsist = React.createClass({
  _rowNo: 0,
  _ingridients: [],
  _portions: [],
  _units: [],
  handleIngridient: function(ingridient, rowNo) {
    this._ingridients[rowNo] = ingridient;
    return this.props.returnIngridients(this._ingridients);
  },
  handlePortion: function(portion, rowNo) {
    this._portions[rowNo] = portion;
    return this.props.returnPortions(this._portions);
  },
  handleUnit: function(unit, rowNo) {
    this._units[rowNo] = unit;
    return this.props.returnUnits(this._units);
  },
  getInitialState: function() {
    return {
      content: []
    };
  },
  componentDidMount: function() {
    return this.addConsist();
  },
  addConsist: function() {
    var tmp;
    tmp = React.createElement("div", {
      "className": "row"
    }, React.createElement("div", {
      "className": "col-lg-7"
    }, React.createElement(IngridientInput, {
      "rowNo": this._rowNo,
      "updateIngridient": this.handleIngridient
    })), React.createElement("div", {
      "className": "col-lg-5"
    }, React.createElement(Portion, {
      "rowNo": this._rowNo,
      "updatePortion": this.handlePortion,
      "updateUnit": this.handleUnit
    })));
    this.state.content.push(tmp);
    this.setState({
      content: this.state.content
    });
    return ++this._rowNo;
  },
  render: function() {
    return React.createElement("div", null, this.state.content, React.createElement("br", null), React.createElement("button", {
      "onClick": this.addConsist,
      "className": "btn btn-xs btn-default"
    }, "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u043d\u0433\u0440\u0438\u0434\u0438\u0435\u043d\u0442"));
  }
});

IngridientInput = React.createClass({
  propTypes: {
    rowNo: React.PropTypes.number,
    updateIngridient: React.PropTypes.func
  },
  handleChange: function(e) {
    var tmp;
    tmp = {
      id: 0,
      name: e.target.value
    };
    this.props.updateIngridient(tmp, this.props.rowNo);
    return this.setState({
      selectedIngridient: tmp
    });
  },
  getInitialState: function() {
    return {
      ingridientList: [],
      selectedIngridient: {
        id: 0,
        name: ''
      }
    };
  },
  handleUpdate: function(ingridient) {
    this.setState({
      selectedIngridient: ingridient
    });
    return this.props.updateIngridient(ingridient, this.props.rowNo);
  },
  componentDidMount: function() {
    var ingridients;
    ingridients = [];
    return client.ingridients.read().done((function(_this) {
      return function(data) {
        var i, _i, _ref;
        if (!checker.check(data, 'Read all ingridients for selector in add dish dialog')) {
          return;
        }
        for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          ingridients.push(React.createElement(Ingridient, {
            "ingridient": data[i],
            "updateSelected": _this.handleUpdate
          }));
        }
        return _this.setState({
          ingridientList: ingridients
        });
      };
    })(this));
  },
  render: function() {
    return React.createElement("div", {
      "className": "input-group"
    }, React.createElement("div", {
      "className": "input-group-btn"
    }, React.createElement("button", {
      "type": "button",
      "className": "btn btn-default dropdown-toggle",
      "data-toggle": "dropdown"
    }, "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0438\u043b\u0438 ", React.createElement("span", {
      "className": "caret"
    })), React.createElement("ul", {
      "id": "menu-ingridient-list",
      "className": "dropdown-menu"
    }, this.state.ingridientList)), React.createElement("input", {
      "id": "ingridient-new",
      "type": "text",
      "className": "form-control",
      "onChange": this.handleChange,
      "value": this.state.selectedIngridient.name,
      "placeholder": "введите ингридиент"
    }));
  }
});

Ingridient = React.createClass({
  propTypes: {
    ingridient: React.PropTypes.object,
    updateSelected: React.PropTypes.func
  },
  handleClick: function() {
    return this.props.updateSelected(this.props.ingridient);
  },
  render: function() {
    return React.createElement("li", {
      "onClick": this.handleClick
    }, React.createElement("a", {
      "href": "#"
    }, this.props.ingridient.name));
  }
});

Portion = React.createClass({
  propTypes: {
    rowNo: React.PropTypes.number,
    updatePortion: React.PropTypes.func,
    updateUnit: React.PropTypes.func
  },
  handleChange: function(e) {
    var portionSize;
    portionSize = Number(e.target.value) || 0;
    this.props.updatePortion(portionSize, this.props.rowNo);
    return this.setState({
      value: portionSize
    });
  },
  currUnitId: 0,
  getInitialState: function() {
    return {
      value: '',
      units: [],
      currUnit: {
        id: 0,
        name: '????'
      }
    };
  },
  componentDidMount: function() {
    return client.units.read().done((function(_this) {
      return function(data) {
        if (!checker.check(data, 'Read all units in add dish dialog')) {
          return;
        }
        _this.setState({
          units: data,
          currUnit: {
            id: data[_this.currUnitId].id,
            name: data[_this.currUnitId].name
          }
        });
        return _this.props.updateUnit(data[_this.currUnitId], _this.props.rowNo);
      };
    })(this));
  },
  changeUnits: function() {
    var maxId, unit;
    maxId = this.state.units.length - 1;
    if (++this.currUnitId > maxId) {
      this.currUnitId = 0;
    }
    unit = this.state.units[this.currUnitId];
    this.props.updateUnit(unit, this.props.rowNo);
    return this.setState({
      currUnit: {
        name: unit.name,
        id: unit.id
      }
    });
  },
  render: function() {
    return React.createElement("div", {
      "className": "input-group"
    }, React.createElement("input", {
      "type": "number",
      "className": "form-control",
      "onChange": this.handleChange,
      "value": this.state.value,
      "placeholder": "Количество"
    }), React.createElement("span", {
      "onClick": this.changeUnits,
      "unitId": this.state.currUnit.id,
      "title": "Кликните для смены единиц измерения",
      "className": "input-group-addon"
    }, this.state.currUnit.name));
  }
});

React.render(React.createElement(Menu, null), $('#menu').get(0));

React.render(React.createElement(DishAdd, null), $('#menu-dish-add').get(0));

React.render(React.createElement(DishCreate, null), $('#menu-dish-create').get(0));
